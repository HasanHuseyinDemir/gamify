[
  {
    "name": "🎮 Master Event Handler",
    "description": "Tüm eventleri dinleyen ve akıllı tepkiler veren kapsamlı script",
    "code": "// 🎮 MASTER EVENT HANDLER - Tüm eventleri akıllı şekilde yönetir\n\nconsole.log('🎯 Event:', context.event, 'Data:', context.eventData);\n\nswitch(context.event) {\n  case 'onTaskComplete':\n    // Görev tamamlama bonusları\n    const priorityBonuses = {\n      'urgent': { coins: 100, exp: 50, message: '🚨 Acil görev bonusu!' },\n      'high': { coins: 50, exp: 30, message: '⚡ Yüksek öncelik bonusu!' },\n      'normal': { coins: 20, exp: 15, message: '✅ Görev bonusu!' },\n      'low': { coins: 10, exp: 10, message: '📝 Basit görev bonusu!' }\n    };\n    \n    const bonus = priorityBonuses[task.priority] || priorityBonuses['normal'];\n    x.inventory.addItem('altın', bonus.coins);\n    x.inventory.addItem('exp', bonus.exp);\n    x.ui.notify(bonus.message + ` +${bonus.coins} altın, +${bonus.exp} exp`);\n    break;\n    \n  case 'onTaskAdd':\n    x.ui.notify('➕ Yeni görev planlandı: ' + context.eventData.task.name);\n    break;\n    \n  case 'onInventoryAdd':\n    const { itemName, amount, totalAmount } = context.eventData;\n    if ([10, 25, 50, 100].includes(totalAmount)) {\n      x.achievements.unlock(`${itemName}_collector_${totalAmount}`, `${itemName} milestone!`);\n    }\n    break;\n    \n  default:\n    x.ui.log('Event: ' + context.event);\n}"
  },
  {
    "name": "📊 Analytics Engine", 
    "description": "Gelişmiş analitik ve verimlilik takibi",
    "code": "// 📊 ANALYTICS ENGINE\n\nif (context.event === 'onTaskComplete') {\n  const allTasks = x.tasks.getAllTasks().filter(t => t.completed);\n  const last7Days = x.utils.getDaysAgo(7);\n  const recentTasks = allTasks.filter(t => new Date(t.completedAt) > last7Days);\n  \n  // Kategori dağılımı\n  const categoryStats = {};\n  recentTasks.forEach(t => {\n    const cat = t.category || 'Genel';\n    categoryStats[cat] = (categoryStats[cat] || 0) + 1;\n  });\n  \n  const topCategory = Object.entries(categoryStats).sort(([,a], [,b]) => b - a)[0];\n  \n  if (topCategory && topCategory[1] >= 5) {\n    x.ui.notify(`📊 En verimli kategorin: ${topCategory[0]} (${topCategory[1]} görev)`);\n    x.inventory.addItem('analytics_bonusu', 20);\n  }\n\n  // Haftalık rapor\n  if (recentTasks.length % 7 === 0) {\n    x.ui.notify('📈 Haftalık Analitik Raporu hazırlandı!');\n    x.logs.addLog({\n      name: 'Haftalık Rapor',\n      description: `${recentTasks.length} görev tamamlandı`,\n      points: { analytics: 1 }\n    });\n  }\n}"
  },
  {
    "name": "🎲 Challenge Generator",
    "description": "Dinamik meydan okuma sistemi", 
    "code": "// 🎲 CHALLENGE GENERATOR\n\nif (context.event === 'onTaskComplete') {\n  const random = x.utils.getRandomInt(1, 100);\n  \n  if (random <= 25) {\n    const challenges = [\n      'Pomodoro tekniği ile 25 dakika çalış',\n      'Bugün 3 farklı kategoride görev tamamla',\n      'Bir arkadaşınla görev paylaş',\n      '30 dakika spor yap',\n      'Yeni bir beceri öğrenmeye başla'\n    ];\n    \n    const challenge = x.utils.getRandomChoice(challenges);\n    \n    // Yeni görev olarak challenge ekle\n    x.tasks.addTask({\n      name: '🎲 Daily Challenge',\n      description: challenge,\n      category: 'Challenge',\n      priority: 'normal',\n      points: 50\n    });\n    \n    x.ui.notify('🎲 Yeni günlük meydan okuma eklendi!');\n    x.inventory.addItem('challenge_puanı', 5);\n  }\n}"
  },
  {
    "name": "🏆 Achievement Hunter",
    "description": "Otomatik başarı sistemi",
    "code": "// 🏆 ACHIEVEMENT HUNTER\n\nif (context.event === 'onTaskComplete') {\n  const completedTasks = x.tasks.getAllTasks().filter(t => t.completed);\n  const total = completedTasks.length;\n  \n  // Milestone başarıları\n  if ([5, 10, 25, 50, 100].includes(total)) {\n    x.achievements.unlock(`task_master_${total}`, `${total} görev tamamladın!`);\n    x.inventory.addItem('master_madalyası', 1);\n  }\n  \n  // Kategori uzmanlığı\n  const categories = {};\n  completedTasks.forEach(t => {\n    const cat = t.category || 'Genel';\n    categories[cat] = (categories[cat] || 0) + 1;\n  });\n  \n  Object.entries(categories).forEach(([cat, count]) => {\n    if (count === 10) {\n      x.achievements.unlock(`${cat}_uzmanı`, `${cat} kategorisinde uzmanlaştın!`);\n    }\n  });\n}"
  },
  {
    "name": "🌟 Motivation Booster",
    "description": "Motivasyon artırıcı mesajlar ve bonuslar",
    "code": "// 🌟 MOTIVATION BOOSTER\n\n// Günün saatine göre motivasyon\nconst hour = new Date().getHours();\nlet timeMessage = '';\n\nif (hour >= 5 && hour < 12) {\n  timeMessage = '🌅 Günaydın! Harika bir güne başlangıç!';\n} else if (hour >= 12 && hour < 17) {\n  timeMessage = '☀️ Öğleden sonra enerjisi!';\n} else if (hour >= 17 && hour < 21) {\n  timeMessage = '🌆 Akşam verimlilik zamanı!';\n} else {\n  timeMessage = '🌙 Gece çalışmasının gücü!';\n}\n\nif (context.event === 'onTaskComplete') {\n  const motivationalMessages = [\n    '🎉 Harika! Bir adım daha yaklaştın!',\n    '💪 Güçlü devam! Başarı yoldasın!',\n    '⭐ Şahane! Bu momentum'u koru!',\n    '🚀 Roket gibi ilerliyorsun!',\n    '🏆 Şampiyon ruhu! Devam et!'\n  ];\n  \n  const message = x.utils.getRandomChoice(motivationalMessages);\n  x.ui.notify(timeMessage + ' ' + message);\n  \n  // Streak bonusu\n  const today = new Date().toDateString();\n  const todayTasks = x.tasks.getAllTasks()\n    .filter(t => t.completed && new Date(t.completedAt).toDateString() === today);\n    \n  if (todayTasks.length % 3 === 0) {\n    x.inventory.addItem('motivasyon_bonusu', 10);\n    x.ui.notify('🔥 3\\'lü combo! Motivasyon bonusu kazandın!');\n  }\n}"
  },
  {
    "name": "💎 Treasure Hunter",
    "description": "Rastgele hazine ve sürpriz ödüller",
    "code": "// 💎 TREASURE HUNTER\n\nif (context.event === 'onTaskComplete') {\n  const chance = x.utils.getRandomInt(1, 100);\n  \n  // %15 şans ile hazine bul\n  if (chance <= 15) {\n    const treasures = [\n      { name: 'altın_sandık', amount: 1, message: '📦 Altın sandık buldu!' },\n      { name: 'elmas', amount: 3, message: '💎 3 elmas keşfetti!' },\n      { name: 'nadir_eşya', amount: 1, message: '✨ Nadir eşya elde etti!' },\n      { name: 'sihirli_potion', amount: 2, message: '🧪 Sihirli potion buldu!' }\n    ];\n    \n    const treasure = x.utils.getRandomChoice(treasures);\n    x.inventory.addItem(treasure.name, treasure.amount);\n    x.ui.notify('🏴‍☠️ Hazine Avcısı! ' + treasure.message);\n    \n    // Özel hazine başarısı\n    const totalTreasures = x.inventory.getTotal('altın_sandık') + \n                          x.inventory.getTotal('elmas') + \n                          x.inventory.getTotal('nadir_eşya');\n                          \n    if (totalTreasures >= 10) {\n      x.achievements.unlock('hazine_ustası', 'Toplam 10 hazine elde ettin!');\n    }\n  }\n  \n  // Büyük hazine eventi (%2 şans)\n  if (chance <= 2) {\n    x.inventory.addItem('efsanevi_hazine', 1);\n    x.inventory.addItem('altın', 500);\n    x.ui.notify('🌟 EFSANEVİ HAZINE! +500 altın kazandın!');\n    x.achievements.unlock('efsane_avcı', 'Efsanevi hazine keşfettin!');\n  }\n}"
  },
  {
    "name": "📦 Smart Inventory Manager",
    "description": "Akıllı envanter yönetimi ve otomatik işlemler",
    "code": "// 📦 SMART INVENTORY MANAGER\n\nif (context.event === 'onInventoryAdd') {\n  const { itemName, amount, totalAmount } = context.eventData;\n  \n  // Altın yönetimi\n  if (itemName === 'altın') {\n    if (totalAmount >= 1000 && !x.achievements.isUnlocked('zengin')) {\n      x.achievements.unlock('zengin', '1000 altın biriktirdin!');\n      x.ui.notify('💰 Zengin oldun! Özel ödüller açıldı!');\n    }\n    \n    // Otomatik yatırım önerisi\n    if (totalAmount >= 500 && totalAmount % 500 === 0) {\n      x.ui.notify(`💡 ${totalAmount} altın biriktirdin! Yeni görevlere yatırım yapmayı düşün.`);\n    }\n  }\n  \n  // EXP yönetimi\n  if (itemName === 'exp') {\n    const level = Math.floor(totalAmount / 100) + 1;\n    const previousLevel = Math.floor((totalAmount - amount) / 100) + 1;\n    \n    if (level > previousLevel) {\n      x.ui.notify(`🎉 Level Up! Level ${level}'e yükseldin!`);\n      x.inventory.addItem('level_bonus', level * 10);\n      x.achievements.unlock(`level_${level}`, `Level ${level}'e ulaştın!`);\n    }\n  }\n  \n  // Genel milestone kontrolleri\n  if ([10, 25, 50, 100, 250].includes(totalAmount)) {\n    x.ui.notify(`📊 ${itemName} milestone: ${totalAmount} adet!`);\n    x.inventory.addItem('milestone_ödülü', 5);\n  }\n}"
  },
  {
    "name": "⏰ Time-Based Automation",
    "description": "Zaman bazlı otomatik işlemler ve hatırlatıcılar",
    "code": "// ⏰ TIME-BASED AUTOMATION\n\nconst now = new Date();\nconst hour = now.getHours();\nconst dayOfWeek = now.getDay(); // 0 = Pazar, 1 = Pazartesi...\n\nif (context.event === 'onTaskComplete') {\n  // Sabah rutini (06:00-10:00)\n  if (hour >= 6 && hour < 10) {\n    x.inventory.addItem('sabah_bonusu', 5);\n    x.ui.notify('🌅 Sabah rutini bonusu! Güne harika başladın!');\n    \n    // Hafta içi ekstra bonus\n    if (dayOfWeek >= 1 && dayOfWeek <= 5) {\n      x.inventory.addItem('hafta_içi_bonusu', 3);\n    }\n  }\n  \n  // Akşam değerlendirmesi (19:00-22:00)\n  if (hour >= 19 && hour < 22) {\n    const todayTasks = x.tasks.getAllTasks()\n      .filter(t => t.completed && \n        new Date(t.completedAt).toDateString() === now.toDateString());\n    \n    if (todayTasks.length >= 5) {\n      x.ui.notify('🌟 Verimli gün! 5+ görev tamamladın!');\n      x.inventory.addItem('günlük_başarı', 1);\n    }\n  }\n  \n  // Hafta sonu motivasyonu\n  if (dayOfWeek === 0 || dayOfWeek === 6) {\n    x.ui.notify('🎯 Hafta sonu da çalışıyorsun! Ekstra motivasyon bonusu!');\n    x.inventory.addItem('hafta_sonu_bonusu', 10);\n  }\n  \n  // Gece çalışması (22:00-05:00)\n  if (hour >= 22 || hour < 5) {\n    x.achievements.unlock('gece_kuşu', 'Gece çalışma alışkanlığın var!');\n    x.inventory.addItem('gece_bonusu', 2);\n  }\n}"
  },
  {
    "name": "🔄 Auto Task Suggestions",
    "description": "Akıllı görev önerisi sistemi",
    "code": "// 🔄 AUTO TASK SUGGESTIONS\n\nif (context.event === 'onTaskComplete') {\n  const completedTask = context.eventData.task;\n  const allTasks = x.tasks.getAllTasks();\n  const completedTasks = allTasks.filter(t => t.completed);\n  \n  // Kategori bazlı öneriler\n  const categoryBonus = {\n    'Eğitim': [\n      'Öğrendiğin konuyu not al',\n      'Konuyla ilgili quiz çöz',\n      'Öğrendiklerini birine anlat'\n    ],\n    'Sağlık': [\n      '2 litre su iç',\n      '10 dakika nefes egzersizi',\n      'Sağlıklı atıştırmalık hazırla'\n    ],\n    'İş': [\n      'Email kontrolü yap',\n      'Yarınki planını hazırla',\n      'Çalışma alanını düzenle'\n    ],\n    'Kişisel': [\n      'Günlük tutmaya başla',\n      'Hedeflerini gözden geçir',\n      'Kendine zaman ayır'\n    ]\n  };\n  \n  const suggestions = categoryBonus[completedTask.category];\n  if (suggestions && x.utils.getRandomInt(1, 100) <= 30) {\n    const suggestion = x.utils.getRandomChoice(suggestions);\n    \n    x.tasks.addTask({\n      name: `💡 Öneri: ${suggestion}`,\n      description: `${completedTask.category} kategorisi tamamlama bonusu`,\n      category: completedTask.category,\n      priority: 'low',\n      points: 20\n    });\n    \n    x.ui.notify('💡 Yeni görev önerisi eklendi!');\n  }\n  \n  // Günlük hedef kontrolü\n  const today = new Date().toDateString();\n  const todayCompleted = completedTasks.filter(t => \n    new Date(t.completedAt).toDateString() === today\n  ).length;\n  \n  if (todayCompleted === 3) {\n    x.ui.notify('🎯 3 görev tamamladın! 2 görev daha hedefleyelim!');\n  } else if (todayCompleted === 5) {\n    x.ui.notify('🏆 Günlük hedefini aştın! Harikasın!');\n    x.inventory.addItem('hedef_aşım_bonusu', 25);\n  }\n}"
  },
  {
    "name": "📈 Performance Tracker",
    "description": "Performans takibi ve analiz sistemi",
    "code": "// 📈 PERFORMANCE TRACKER\n\nif (context.event === 'onTaskComplete') {\n  const allTasks = x.tasks.getAllTasks().filter(t => t.completed);\n  const last30Days = x.utils.getDaysAgo(30);\n  const monthlyTasks = allTasks.filter(t => new Date(t.completedAt) > last30Days);\n  \n  // Aylık performans raporu\n  if (monthlyTasks.length % 10 === 0) {\n    const avgPointsPerTask = monthlyTasks.reduce((sum, t) => sum + (t.points || 10), 0) / monthlyTasks.length;\n    \n    x.logs.addLog({\n      name: '📈 Aylık Performans Raporu',\n      description: `${monthlyTasks.length} görev, ortalama ${Math.round(avgPointsPerTask)} puan`,\n      points: { performance: monthlyTasks.length }\n    });\n    \n    if (avgPointsPerTask > 25) {\n      x.achievements.unlock('yüksek_performans', 'Yüksek puanlı görevlerde uzmanlaştın!');\n      x.inventory.addItem('performans_bonusu', 50);\n    }\n  }\n  \n  // Kategori çeşitliliği analizi\n  const categories = {};\n  monthlyTasks.forEach(t => {\n    const cat = t.category || 'Genel';\n    categories[cat] = (categories[cat] || 0) + 1;\n  });\n  \n  const categoryCount = Object.keys(categories).length;\n  if (categoryCount >= 5) {\n    x.achievements.unlock('çok_yönlü', '5+ farklı kategoride çalışıyorsun!');\n    x.ui.notify('🌈 Çok yönlü yaklaşımın harika!');\n  }\n  \n  // Streak analizi\n  const streak = x.utils.calculateStreak(allTasks, 7);\n  if (streak >= 7) {\n    x.achievements.unlock(`streak_${streak}`, `${streak} günlük streak!`);\n    x.inventory.addItem('streak_bonusu', streak * 5);\n  }\n}"
  }
]
